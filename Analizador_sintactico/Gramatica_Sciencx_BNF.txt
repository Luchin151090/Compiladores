PROGRAM ::= [BLOCK]+
BLOCK ::= TI ID PAR_A PAR_B LLAV_A STATE LLAV_B
BLOCK ::= BLOCK'
BLOCK' ::= ''
TI ::= int
TI ::= float
PAR_A ::= (
PAR_B ::= )
LLAV_A ::= {
LLAV_B ::= }
YESX ::= yesx
ELSX ::= elsx
PRINTX ::= printx
STATE ::= EXPR
STATE ::= FIN
STATE ::= ''
COMP ::= ID COMP'

EXPR' ::= ENTERX : EXPR'
EXPR ::= TI ID EXPR'

EXPR' ::= WHILX ( COMP ) : EXPR'
EXPR' ::= YESX ( COMP ) : EXPR' ELSX : EXPR'
EXPR' ::= PRINTX : EXPR'

EXPR' ::= TI EXPR'
EXPR' ::= ID EXPR'
EXPR' ::= NUM EXPR'
EXPR' ::= FIN
EXPR' ::= ASIGN EXPR'
EXPR' ::= OP_PLUS ID EXPR'
EXPR' ::= OP_MINUS ID EXPR'
EXPR' ::= OP_DIV ID EXPR'
EXPR' ::= OP_PRO ID EXPR'


COMP' ::= MAYOR EXPR'
COMP' ::= MENOR EXPR'
COMP' ::= MAYOR_IGUAL EXPR'
COMP' ::= MENOR_IGUAL EXPR'
COMP' ::= DIFERENTE EXPR'
COMP' ::= IGUAL EXPR'
EXPR' ::= ''
EXPR ::= ( EXPR )
OP_PLUS ::= +
OP_MINUS ::= -
OP_DIV ::=  /
OP_PRO::= *
MAYOR ::= >
MENOR ::= <
MAYOR_IGUAL ::= >=
MENOR_IGUAL ::= <=
DIFERENTE ::= !=
IGUAL ::= == 
ID ::= id
ID ::= headx
ASIGN ::= =
FIN ::= finishx
NUM ::= 4
